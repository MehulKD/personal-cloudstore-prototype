Todo：
1. 文件校验能否基于块而非整个文件？
---很简单，加一个size即可。

2. 转换为动态切块是否容易？
---不太麻烦，把切块从TransferTask的构造函数中转移到每次调用nextBlock的中即可，在这里根据各种信息进行切块。

3. 文件传输，多个块在一个TCP连接中能不能传？  麻烦的是确认机制...不对，现在块和TCP连接是解耦的，应该不复杂。。
---也不是太麻烦，但是感觉需要比较精确地依赖于TCP传输的准确性了，不过其实一直都是这么依赖的。把upload的参数变成一个block的list即可，每个block都是同样的发送过程、确认过程。发送与切块、确认是解耦的。

*4. TCP连接的进一步管理：传输结束后关闭、异常处理。
---用户强制退出、连接中断、程序崩溃等的处理还需要进一步的完善、确认。程序崩溃就不管了，这可以不考虑，要考虑的异常就是用户强制退出、连接中断。

*5. 实际文件的处理并不是以文件为最小单元的，而是块，那么数据库中是否需要体现这一点，便于一些情况下的管理，如：异常恢复。
---确实需要，如果传输了一部分了，需要做记录的。都记录在客户端的数据库内，记录已经传输的大小，这样可以迅速进行定位。本地文件状态需要增加一个已传输一部分的状态。每次客户端启动后，查询数据库，对未完成的同步任务继续同步（同样重新发送请求），服务器在每次客户端离线的时候，都会进行一次已完成块的merge，若全部完成，则保存为最终文件，否则保存为<文件名>.part。最后完成时，利用文件系统中的文件名进行最后的merge。	

6. 异常发生之后的处理：一个块的传输过程中连接断开了，双方应该具体怎样处理。
---由客户端处理，一切以客户端为主动方。客户端根据下载完成情况、上传ACK情况发起重传请求。

7. 客户端Controller的工作方式具体描述。=.=

8. 下载功能的实现。
9. 增量同步功能的实现。
10. 捆绑的实现。
---确认和重传这件事还是没这么简单的。。。